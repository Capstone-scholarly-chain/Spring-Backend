package Baeksa.money.domain.streams.service;


import Baeksa.money.domain.committee.service.RequestResponseTracker;
import Baeksa.money.domain.fcm.service.FcmService;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.data.redis.connection.stream.Consumer;
import org.springframework.data.redis.connection.stream.MapRecord;
import org.springframework.data.redis.connection.stream.ReadOffset;
import org.springframework.data.redis.connection.stream.StreamOffset;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.stream.StreamListener;
import org.springframework.data.redis.stream.StreamMessageListenerContainer;
import org.springframework.data.redis.stream.Subscription;
import org.springframework.stereotype.Component;

import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;


@Slf4j
@Component
@RequiredArgsConstructor
public class RedisStreamConsumer implements StreamListener<String, MapRecord<String, String, String>>,
        InitializingBean, DisposableBean {
    private final RedisTemplate<String, Object> redisTemplate;
    private StreamMessageListenerContainer<String, MapRecord<String, String, String>> listenerContainer;
    private Subscription subscription;

    private final RedisOperator redisOperator;
    private final ObjectMapper objectMapper;
    private final FcmService fcmService;

    private final RequestResponseTracker requestTracker;
    private final RedisTemplate<String, Integer> redisTemplateInteger;

    private static final String SPRING_TO_NESTJS_STREAM = "spring-nestjs-requests";
    private static final String NESTJS_TO_SPRING_STREAM = "nestjs-spring-responses";
    private static final String NESTJS_CONSUMER_GROUP = "nest-consumer-group";    // NestJSÏôÄ ÎèôÏùº
    private static final String NESTJS_CONSUMER_NAME = "nest-consumer";           // NestJSÏôÄ ÎèôÏùº
    private static final String SPRING_CONSUMER_GROUP = "spring-consumer-group";  // Spring Ï†ÑÏö©
    private static final String SPRING_CONSUMER_NAME = "spring-consumer";

    @Override
    public void onMessage(MapRecord<String, String, String> message) {

        Map<String, String> value = message.getValue();

        log.info("[ Consumer Î¶¨Îî©Ï§ë ]:");
        log.info("[ Stream ]: {}", message.getStream());
        log.info("[ recordId ]: {}", message.getId());
        log.info("[ messageValue ]: {}", message.getValue());

        try {
            // üî• Í≥µÌÜµ ÌïÑÎìú Ï∂îÏ∂ú
            String originalRecordId = value.get("originalRecordId");
            String requestType = value.get("requestType");
            String success = value.get("success");
            String result = value.get("result");
            String processingTime = value.get("processingTime");
            String timestamp = value.get("timestamp");

            // üî• Í∏∞Î≥∏ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
            if (success == null || requestType == null) {
                log.warn("‚ùó ÌïÑÏàò ÌïÑÎìú ÎàÑÎùΩ: originalRecordId={}, requestType={}", originalRecordId, requestType);
                return;
            }

            // üî• ÏÑ±Í≥µ/Ïã§Ìå®Ïóê Îî∞Î•∏ Ï≤òÎ¶¨
            boolean isSuccess = "true".equals(success);
            log.info("üéØ Processing response: Type={}, Success={}, OriginalId={}",
                    requestType, isSuccess, originalRecordId);

            if (isSuccess) {
                handleSuccessResponse(requestType, originalRecordId, result, processingTime, timestamp);
            } else {
                handleErrorResponse(requestType, originalRecordId, result, processingTime, timestamp);
            }

        } catch (Exception e) {
            log.error("‚ùå Î©îÏãúÏßÄ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù: {}", e.getMessage(), e);
        } finally {
            // ACK Ï≤òÎ¶¨
            try {
                this.redisOperator.ackStream(SPRING_CONSUMER_GROUP, message);
                log.info("‚úÖ ACK ÏôÑÎ£å: {}", message.getId());
            } catch (Exception e) {
                log.error("‚ùå ACK Ïã§Ìå®: {}", e.getMessage(), e);
            }
        }
    }

    /**
     * üî• ÏÑ±Í≥µ ÏùëÎãµ Ï≤òÎ¶¨ - requestTypeÎ≥ÑÎ°ú Îã§Î•∏ Î°úÏßÅ Ï†ÅÏö© Í∞ÄÎä•
     */
    private void handleSuccessResponse(String requestType, String originalRecordId,
                                       String result, String processingTime, String timestamp) {
        log.info("[ requestType ]: {}", requestType);

        try {
            switch (requestType) {
                case "TEST_REQUEST" -> {
                    Map<String, Object> resultData = objectMapper.readValue(result, Map.class);
                    log.info("üß™ ÌÖåÏä§Ìä∏ ÏöîÏ≤≠ ÏÑ±Í≥µ");
                    log.info("   - Í≤∞Í≥º: {}", resultData);
                    log.info("   - Ï≤òÎ¶¨ÏãúÍ∞Ñ: {}ms", processingTime);
                    fcmService.sendMessageToUser("202210777", "ÏïåÎ¶º", "Î≥¥ÎÇ∏Îã§");
                    log.info("[ ÏïåÎ¶º Ï†ÑÏÜ° ÏÑ±Í≥µ ]");
                }
                case "REGISTER_USER" -> {
                    Map<String, Object> resultData = objectMapper.readValue(result, Map.class);
                    log.info("ÌïôÏÉù ÌöåÏõêÍ∞ÄÏûÖ Î∞è Ï°∞ÏßÅ Ïã†Ï≤≠");
                    String userId = resultData.get("userId").toString();
                    log.info("   - ÏÇ¨Ïö©ÏûêID: {}", userId);
                    log.info("   - ÏÉÅÌÉú: {}", resultData.get("status"));
                    //        message: 'ÏûÖÍ∏à Ìï≠Î™©Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§',
//                    fcmService.sendMessageToStudents(userId + "Îãò", resultData.get("message").toString());
                    fcmService.sendMessageToUser(userId, userId + " Îãò", "ÌöåÏõêÍ∞ÄÏûÖ Î∞è Ï°∞ÏßÅ Í∞ÄÏûÖ ÏöîÏ≤≠Ïù¥ Ïã†Ï≤≠ÎêòÏóàÏäµÎãàÎã§.");
                    fcmService.sendMessageToCouncil("Ï°∞ÏßÅ Í∞ÄÏûÖ ÏöîÏ≤≠Ïù¥ ÏûàÏäµÎãàÎã§.", "ÌïôÏÉù " + userId);
                }
                case "APPROVE_MEMBERSHIP" -> {
                    Map<String, Object> resultData = objectMapper.readValue(result, Map.class);
                    log.info("‚úÖ Î©§Î≤ÑÏã≠ ÏäπÏù∏ ÏôÑÎ£å");
                    log.info("   - Í≤∞Í≥º: {}", resultData);

                    Object requestObj = resultData.get("request");
                    log.info("   - request: {}", requestObj);

                    if (requestObj instanceof Map<?, ?> requestMap) {
                        String applicantId = requestMap.get("applicantId").toString();
                        log.info("Ïñ¥ÎîîÍ∞Ä Ï∞çÌûàÎäî????");
                        fcmService.sendMessageToUser(applicantId, applicantId + " Îãò", "Ï°∞ÏßÅ Í∞ÄÏûÖ ÏöîÏ≤≠Ïù¥ ÏäπÏù∏ÎêòÏóàÏäµÎãàÎã§.");
                    } else {
                        log.warn("[ request ÌòïÏãùÏùÑ Ïïå Ïàò ÏóÜÏùå ]: {}", requestObj.getClass().getName());
                    }
                }
                case "REJECT_MEMBERSHIP" -> {
                    Map<String, Object> resultData = objectMapper.readValue(result, Map.class);
                    log.info("‚ùå Î©§Î≤ÑÏã≠ Í±∞Ï†à ÏôÑÎ£å");
                    log.info("   - Í≤∞Í≥º: {}", resultData);
                    Object requestObj = resultData.get("request");
                    log.info("   - request: {}", requestObj);

                    if (requestObj instanceof Map<?, ?> requestMap) {
                        String rejectorId = requestMap.get("rejectorId").toString();
                        log.info("Ïñ¥ÎîîÍ∞Ä Ï∞çÌûàÎäî");
                        fcmService.sendMessageToUser(rejectorId, rejectorId + " Îãò", "Ï°∞ÏßÅ Í∞ÄÏûÖ ÏöîÏ≤≠Ïù¥ ÏäπÏù∏ÎêòÏóàÏäµÎãàÎã§.");
                    } else {
                        log.warn("[ request ÌòïÏãùÏùÑ Ïïå Ïàò ÏóÜÏùå ]: {}", requestObj.getClass().getName());
                    }
                }


                case "ADD_DEPOSIT" -> {
                    Map<String, Object> resultData = objectMapper.readValue(result, Map.class);
                    log.info("ÌïôÏÉù ÏûÖÍ∏à ÎÇ¥Ïó≠ ÏöîÏ≤≠");
                    log.info("   - Í≤∞Í≥º: {}", resultData);
                    String ledgerEntryId = resultData.get("ledgerEntryId").toString();
                    log.info("   - ledgerEntryId: {}", ledgerEntryId);
                    String userId = splitId(ledgerEntryId);
                    log.info("   - userId: {}", userId);

                    fcmService.sendMessageToUser(userId, userId + " Îãò", "ÏûÖÍ∏à ÎÇ¥Ïó≠ Îì±Î°ùÏù¥ Ïã†Ï≤≠ÎêòÏóàÏäµÎãàÎã§.");
                    fcmService.sendMessageToCouncil("ÏûÖÍ∏à ÎÇ¥Ïó≠ Îì±Î°ù Ïã†Ï≤≠Ïù¥ ÏûàÏäµÎãàÎã§.", "ÌïôÏÉù " + userId);
                }
                case "APPROVE_DEPOSIT" -> {
                    Map<String, Object> resultData = objectMapper.readValue(result, Map.class);
                    log.info("ÌïôÏÉùÌöåÍ∞Ä ÏûÖÍ∏à ÎÇ¥Ïó≠ ÏäπÏù∏");
                    log.info("   - Í≤∞Í≥º: {}", resultData);
                    String message = resultData.get("message").toString();
                    log.info("   - message: {}", message);
                    String ledgerEntryId = splitMessage(message);
                    log.info("   - ledgerEntryId: {}", ledgerEntryId);

                    String userId = splitId(ledgerEntryId);
                    log.info("   - userId: {}", userId);

                    //Ïó¨Í∏∞ userIdÍ∞Ä ÌïôÏÉùÏù∏ÏßÄ ÌïôÏÉùÌöåÏù∏ÏßÄ
                    fcmService.sendMessageToUser(userId, userId + " Îãò", "ÏûÖÍ∏à ÎÇ¥Ïó≠ Îì±Î°ùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.");
                    fcmService.sendMessageToCouncil("ÏûÖÍ∏à ÎÇ¥Ïó≠ Îì±Î°ù Ïã†Ï≤≠Ïù¥ ÏûàÏäµÎãàÎã§.", "ÌïôÏÉù " + userId);
                }
                case "REJECT_DEPOSIT" -> {
                    Map<String, Object> resultData = objectMapper.readValue(result, Map.class);
                    log.info("ÌïôÏÉùÌöåÍ∞Ä ÏûÖÍ∏à ÎÇ¥Ïó≠ Í±∞Ï†à");
                    log.info("   - Í≤∞Í≥º: {}", resultData);
                    String message = resultData.get("message").toString();
                    log.info("   - message: {}", message);
                    String ledgerEntryId = splitMessage(message);
                    log.info("   - ledgerEntryId: {}", ledgerEntryId);

                    String userId = splitId(ledgerEntryId);
                    log.info("   - userId: {}", userId);

                    //Ïó¨Í∏∞ userIdÍ∞Ä ÌïôÏÉùÏù∏ÏßÄ ÌïôÏÉùÌöåÏù∏ÏßÄ
                    fcmService.sendMessageToUser(userId, userId + " Îãò", "ÏûÖÍ∏à ÎÇ¥Ïó≠ Îì±Î°ùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.");
                    fcmService.sendMessageToCouncil("ÏûÖÍ∏à ÎÇ¥Ïó≠ Îì±Î°ù Ïã†Ï≤≠Ïù¥ ÏûàÏäµÎãàÎã§.", "ÌïôÏÉù " + userId);
                }


                case "ADD_WITHDRAW" -> {
                    Map<String, Object> resultData = objectMapper.readValue(result, Map.class);
                    log.info("ÌïôÏÉùÌöå Ï∂úÍ∏à Í∏∞ÏûÖ ÏöîÏ≤≠");
                    log.info("   - Í≤∞Í≥º: {}", resultData);
                    String ledgerEntryId = resultData.get("ledgerEntryId").toString();
                    log.info("   - ledgerEntryId: {}", ledgerEntryId);
                    String userId = splitId(ledgerEntryId);
                    log.info("   - userId: {}", userId);

                    fcmService.sendMessageToUser(userId, userId + " Îãò", "Ï∂úÍ∏à ÎÇ¥Ïó≠ Îì±Î°ùÏù¥ Ïã†Ï≤≠ÎêòÏóàÏäµÎãàÎã§.");
                    fcmService.sendMessageToStudents("ÌïôÏÉùÌöå " + userId + " ÎãòÏùò", "Ï∂úÍ∏à ÎÇ¥Ïó≠ Îì±Î°ù Ïã†Ï≤≠Ïù¥ ÏûàÏäµÎãàÎã§.");
//                    fcmService.sendMessageToCouncil("ÌïôÏÉùÌöå " + userId + " ÎãòÏùò", "Ï∂úÍ∏à ÎÇ¥Ïó≠ Îì±Î°ù Ïã†Ï≤≠Ïù¥ ÏûàÏäµÎãàÎã§.");
                }
                case "VOTE_WITHDRAW" -> {
                    Map<String, Object> resultData = objectMapper.readValue(result, Map.class);
                    log.info("ÌïôÏÉùÏù¥ Ï∂úÍ∏à ÏäπÏù∏ Ìà¨Ìëú");
                    log.info("   - Í≤∞Í≥º: {}", resultData);
                    String message = resultData.get("message").toString();
                    log.info("   - message: {}", message);
                    String ledgerEntryId = splitMessage(message);
                    log.info("   - ledgerEntryId: {}", ledgerEntryId);

                    String userId = splitId(ledgerEntryId);
                    log.info("   - userId: {}", userId);
                    //Ìà¨ÌëúÎ•º ÎßåÎì† ÏÇ¨ÎûåÌïúÌÖå ÏïåÎ¶º, Ìà¨ÌëúÎ•º Ìïú Í∞úÍ∞úÏù∏ÏùÑ Îç∞Ïù¥ÌÑ∞Ïóê Ïïà Îã¥ÏïÑÏÑú Ïñ¥Ï©î Ïàò ÏóÜÏùå~~~
                    fcmService.sendMessageToUser(userId, userId + " Îãò", "Ï∂úÍ∏à ÎÇ¥Ïó≠ Ìà¨ÌëúÍ∞Ä ÏûàÏäµÎãàÎã§.");
                    //Ìà¨ÌëúÎäî Í≤∞Í≥ºÎ•º Î≥¥Ïó¨Ï£ºÎäî ÏïåÎ¶ºÏù¥ ÏûàÏúºÎ©¥ Ï¢ãÍ≤†Ïùå
                    //Ïòà) title:Î™®Íµ∞Îãò, body:ÌïôÏÉùÌöå 00Ï∂úÍ∏à ÎÇ¥Ïó≠ Ìà¨Ìëú Ï¢ÖÎ£å 10Î∂Ñ Ï†ÑÏûÖÎãàÎã§
                    //title:ÌïôÏÉùÌöå 00 Ï∂úÍ∏à ÎÇ¥Ïó≠Ïùò Ìà¨Ìëú Í≤∞Í≥ºÏûÖÎãàÎã§. body: Ï∞¨ÏÑ± 10Î™Ö, Î∞òÎåÄ 15Î™Ö
                }



                case "GET_STUDENT_COUNT", "GET_COUNCIL_COUNT" -> {
                    Map<String, Object> resultData = objectMapper.readValue(result, Map.class);
                    log.info("üìä Ï°∞Ìöå ÏöîÏ≤≠ ÏôÑÎ£å: {}", requestType);
                    log.info("   - Í≤∞Í≥º: {}", resultData);
                    String count = resultData.get("result").toString();
                    log.info("   - count: {}", count);

                    requestTracker.markRequestCompleted(originalRecordId);
                    log.info("üéØ ÌïôÏÉù Ïàò ÏöîÏ≤≠ ÏôÑÎ£å Ï≤òÎ¶¨: {}", originalRecordId);
                }
                case "GET_PENDING_REQUESTS" -> {
                    log.info("ÎåÄÍ∏∞Ï§ëÏù∏ ÏöîÏ≤≠ Ï°∞Ìöå ÏôÑÎ£å");
                    Map<String, Object> resultData = objectMapper.readValue(result, Map.class);
                    log.info("   - Í≤∞Í≥º: {}", resultData);

                    requestTracker.markRequestCompleted(originalRecordId);
                    log.info("üéØ ÎåÄÍ∏∞Ï§ëÏù∏ ÏöîÏ≤≠ Ï°∞Ìöå ÏôÑÎ£å Ï≤òÎ¶¨: {}", originalRecordId);
                }
                case "GET_REQUEST_STATUS" -> {
                    log.info("ÌäπÏ†ï id ÏÉÅÌÉú Ï°∞Ìöå ÏôÑÎ£å");
                    Map<String, Object> resultData = objectMapper.readValue(result, Map.class);
                    log.info("Ï°∞Ìöå ÏöîÏ≤≠ ÏôÑÎ£å: {}", requestType);
                    log.info("   - Í≤∞Í≥º: {}", resultData);
                    String status = resultData.get("status").toString();
                    log.info("   - status: {}", status);

                    requestTracker.markRequestCompleted(originalRecordId);
                    log.info("üéØ ÌïôÏÉù Ïàò ÏöîÏ≤≠ ÏôÑÎ£å Ï≤òÎ¶¨: {}", originalRecordId);
                }
                case "GET_PENDING_DEPOSITS" -> {
                    log.info("GET_PENDING_DEPOSITS");
                    List<Map<String, Object>> depositList = objectMapper.readValue(
                            result, new TypeReference<List<Map<String, Object>>>() {});
                    log.info("   - Í≤∞Í≥º: {}", depositList);

                    requestTracker.markRequestCompleted(originalRecordId);
                    log.info("üéØ GET_PENDING_DEPOSITS ÏôÑÎ£å Ï≤òÎ¶¨: {}", originalRecordId);
                }
                case "GET_PENDING_WITHDRAW" -> {
                    log.info("GET_PENDING_WITHDRAW");
                    List<Map<String, Object>> depositList = objectMapper.readValue(
                            result, new TypeReference<List<Map<String, Object>>>() {});
                    log.info("   - Í≤∞Í≥º: {}", depositList);

                    requestTracker.markRequestCompleted(originalRecordId);
                    log.info("üéØ GET_PENDING_WITHDRAW ÏôÑÎ£å Ï≤òÎ¶¨: {}", originalRecordId);
                }
                case "GET_VOTE_STATUS" -> {
                    log.info("GET_VOTE_STATUS");
                    Map<String, Object> resultData = objectMapper.readValue(result, Map.class);
                    log.info("Ï°∞Ìöå ÏöîÏ≤≠ ÏôÑÎ£å: {}", requestType);
                    log.info("   - Í≤∞Í≥º: {}", resultData);
//                    String status = resultData.get("status").toString();
//                    log.info("   - status: {}", status);
                    requestTracker.markRequestCompleted(originalRecordId);
                    log.info("üéØ Ìà¨Ìëú ÏßÑÌñâ Ï°∞Ìöå ÏôÑÎ£å Ï≤òÎ¶¨: {}", originalRecordId);

                    //
                }
                case "GET_THEME_BALANCE" -> {
                    log.info("GET_THEME_BALANCE");
                }
                case "GET_ALL_THEME_BALANCE" -> {
                    log.info("GET_ALL_THEME_BALANCE");
                }

                default -> {
                    log.info("üîÑ ÏùºÎ∞ò ÏöîÏ≤≠ Ï≤òÎ¶¨ ÏôÑÎ£å: {}", requestType);
//                    log.info("   - Í≤∞Í≥º: {}", resultData);
                }
            }

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è result JSON ÌååÏã± Ïã§Ìå®, ÏõêÎ≥∏ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©: {}", result);
            // Í∑∏ÎûòÎèÑ latchÎäî ÌíÄÏñ¥Ï§òÏïº ÏÑúÎπÑÏä§Í∞Ä Ïïà Ï£ΩÏùå
//            requestTracker.markRequestCompleted(originalRecordId);
        }
    }

    private String splitMessage(String message) {
        String[] s = message.split(" ");
        return s[2];
    }

    private String splitId(String ledgerEntryId) {
        String[] s = ledgerEntryId.split("_");
        return s[2];
    }

    private void handleErrorResponse(String requestType, String originalRecordId,
                                     String error, String processingTime, String timestamp) {
        log.error("‚ùå ÏöîÏ≤≠ Ï≤òÎ¶¨ Ïã§Ìå®: Type={}, Error={}", requestType, error);
        log.error("   - ÏõêÎ≥∏ RecordId: {}", originalRecordId);
        log.error("   - Ï≤òÎ¶¨ÏãúÍ∞Ñ: {}ms", processingTime);
    }


    @Override
    public void destroy() throws Exception {
        if(this.subscription != null){
            this.subscription.cancel();
        }
        if(this.listenerContainer != null){
            this.listenerContainer .stop();
        }
    }

    @Override
    public void afterPropertiesSet() throws Exception {

        // Consumer Group ÏÑ§Ï†ï
        this.redisOperator.createStreamConsumerGroup(NESTJS_TO_SPRING_STREAM, SPRING_CONSUMER_GROUP);

        // StreamMessageListenerContainer ÏÑ§Ï†ï
        this.listenerContainer = this.redisOperator.createStreamMessageListenerContainer();

        //Subscription ÏÑ§Ï†ï
        this.subscription = this.listenerContainer.receive(
                Consumer.from(this.SPRING_CONSUMER_GROUP, SPRING_CONSUMER_NAME), //ÎàÑÍ∞Ä ÏùΩÏùÑÏßÄ
                StreamOffset.create(NESTJS_TO_SPRING_STREAM, ReadOffset.lastConsumed()),
                //Ïñ¥Îñ§ Ïä§Ìä∏Î¶ºÏùÑ Ïñ¥ÎîîÏÑúÎ∂ÄÌÑ∞ ÏùΩÏùÑÏßÄ
                this
        );

        log.info("streamKey: {}", NESTJS_TO_SPRING_STREAM);

        // 2Ï¥à ÎßàÎã§, Ï†ïÎ≥¥ GET
        this.subscription.await(Duration.ofSeconds(2));

        // redis listen ÏãúÏûë
        this.listenerContainer.start();
    }
}
